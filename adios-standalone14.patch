diff --git a/block/Kconfig.iosched b/block/Kconfig.iosched
index 27f11320b..7e773b7f3 100644
--- a/block/Kconfig.iosched
+++ b/block/Kconfig.iosched
@@ -16,6 +16,20 @@ config MQ_IOSCHED_KYBER
 	  synchronous writes, it will self-tune queue depths to achieve that
 	  goal.
 
+config MQ_IOSCHED_ADIOS
+	tristate "Adaptive Deadline I/O scheduler"
+	default y
+	help
+	  The Adaptive Deadline I/O Scheduler (ADIOS) is a multi-queue I/O
+	  scheduler with learning-based adaptive latency control.
+
+config MQ_IOSCHED_DEFAULT_ADIOS
+	bool "Enable ADIOS I/O scheduler as default MQ I/O scheduler"
+	depends on MQ_IOSCHED_ADIOS=y
+	default y
+	help
+	  Enable the ADIOS I/O scheduler as the default scheduler for MQ I/O.
+	  
 config IOSCHED_BFQ
 	tristate "BFQ I/O scheduler"
 	select BLK_ICQ
diff --git a/block/Makefile b/block/Makefile
index 46ada9dc8..2fd10afba 100644
--- a/block/Makefile
+++ b/block/Makefile
@@ -23,6 +23,7 @@ obj-$(CONFIG_BLK_CGROUP_IOLATENCY)	+= blk-iolatency.o
 obj-$(CONFIG_BLK_CGROUP_IOCOST)	+= blk-iocost.o
 obj-$(CONFIG_MQ_IOSCHED_DEADLINE)	+= mq-deadline.o
 obj-$(CONFIG_MQ_IOSCHED_KYBER)	+= kyber-iosched.o
+obj-$(CONFIG_MQ_IOSCHED_ADIOS)	+= adios.o
 bfq-y				:= bfq-iosched.o bfq-wf2q.o bfq-cgroup.o
 obj-$(CONFIG_IOSCHED_BFQ)	+= bfq.o
 
diff --git a/block/adios.c b/block/adios.c
new file mode 100644
index 000000000..1c95a0050
--- /dev/null
+++ b/block/adios.c
@@ -0,0 +1,159 @@
+// ==================== START: COPY AND PASTE THIS ENTIRE BLOCK INTO block/adios.c ====================
+// SPDX-License-Identifier: GPL-2.0
+/*
+ * ADIOS - Incremental Debugging - Step 1
+ * Core data structure and init/exit functions are from the real ADIOS.
+ * Dispatch and insert logic is still the minimal version from mq-deadline.
+ */
+#include <linux/kernel.h>
+#include <linux/fs.h>
+#include <linux/blkdev.h>
+#include <linux/bio.h>
+#include <linux/module.h>
+#include <linux/slab.h>
+#include <linux/init.h>
+#include <linux/compiler.h>
+#include <linux/rbtree.h>
+#include <linux/sbitmap.h>
+
+#include "elevator.h"
+#include "blk.h"
+#include "blk-mq.h"
+#include "blk-mq-debugfs.h"
+#include "blk-mq-sched.h"
+
+// +++ REAL ADIOS STRUCTS AND DEFINES (STEP 1) +++
+#define ADIOS_VERSION "2.2.1-debug-step1"
+
+// Define operation types supported by ADIOS
+enum adios_op_type {
+	ADIOS_READ    = 0,
+	ADIOS_WRITE   = 1,
+	ADIOS_DISCARD = 2,
+	ADIOS_OTHER   = 3,
+	ADIOS_OPTYPES = 4,
+};
+
+// Adios scheduler data - REAL VERSION (partially minimal for now)
+struct adios_data {
+	spinlock_t pq_lock;
+	struct list_head prio_queue;
+
+	struct rb_root_cached dl_tree[2];
+	spinlock_t lock;
+    
+    // NOTE: Other fields from the real ADIOS will be added in later steps.
+};
+
+// Stub functions needed for compilation
+static void adios_init_icq(struct io_cq *icq) { /* Empty on purpose */ }
+static void adios_exit_icq(struct io_cq *icq) { /* Empty on purpose */ }
+
+
+// --- MINIMAL LOGIC (from mq-deadline, temporarily) ---
+// These functions will be replaced in the next steps.
+
+static struct request *
+adios_dispatch_request(struct blk_mq_hw_ctx *hctx)
+{
+	// NOTE: This is minimal logic, it doesn't do anything yet.
+	// The goal is just to not crash.
+	return NULL;
+}
+
+static void adios_insert_requests(struct blk_mq_hw_ctx *hctx,
+			       struct list_head *list,
+			       blk_insert_t flags)
+{
+	// Move requests to a temporary list to "consume" them.
+    // This avoids request leaks while we're debugging.
+	struct adios_data *ad = hctx->queue->elevator->elevator_data;
+	spin_lock(&ad->pq_lock);
+	list_splice_tail_init(list, &ad->prio_queue);
+	spin_unlock(&ad->pq_lock);
+
+    // Tell the scheduler to run to try and dispatch these.
+    blk_mq_sched_mark_restart_hctx(hctx);
+}
+
+static bool adios_has_work(struct blk_mq_hw_ctx *hctx)
+{
+	struct adios_data *ad = hctx->queue->elevator->elevator_data;
+	return !list_empty_careful(&ad->prio_queue);
+}
+
+// --- REAL ADIOS INIT/EXIT FUNCTIONS (STEP 1) ---
+
+static void adios_exit_sched(struct elevator_queue *e)
+{
+	struct adios_data *ad = e->elevator_data;
+
+	WARN_ON_ONCE(!list_empty(&ad->prio_queue));
+	kfree(ad);
+}
+
+static int adios_init_sched(struct request_queue *q, struct elevator_type *e)
+{
+	struct adios_data *ad;
+	struct elevator_queue *eq;
+
+	eq = elevator_alloc(q, e);
+	if (!eq)
+		return -ENOMEM;
+
+	ad = kzalloc_node(sizeof(*ad), GFP_KERNEL, q->node);
+	if (!ad) {
+		kobject_put(&eq->kobj);
+		return -ENOMEM;
+	}
+	eq->elevator_data = ad;
+
+	INIT_LIST_HEAD(&ad->prio_queue);
+	ad->dl_tree[0] = RB_ROOT_CACHED;
+	ad->dl_tree[1] = RB_ROOT_CACHED;
+
+	spin_lock_init(&ad->lock);
+	spin_lock_init(&ad->pq_lock);
+
+	blk_queue_flag_set(QUEUE_FLAG_SQ_SCHED, q);
+	q->elevator = eq;
+	return 0;
+}
+
+
+// --- FINAL ELEVATOR TYPE DEFINITION ---
+
+static struct elevator_type mq_adios = {
+	.ops = {
+		.insert_requests	= adios_insert_requests,
+		.dispatch_request	= adios_dispatch_request,
+		.has_work		    = adios_has_work,
+		.exit_sched		    = adios_exit_sched,
+		.init_sched		    = adios_init_sched,
+        .init_icq           = adios_init_icq,
+        .exit_icq           = adios_exit_icq,
+	},
+    .icq_size = sizeof(struct io_cq),
+    .icq_align = __alignof__(struct io_cq),
+	.elevator_name = "adios",
+	.elevator_owner = THIS_MODULE,
+};
+
+static int __init adios_init(void)
+{
+	return elv_register(&mq_adios);
+}
+
+static void __exit adios_exit(void)
+{
+	elv_unregister(&mq_adios);
+}
+
+module_init(adios_init);
+module_exit(adios_exit);
+
+MODULE_AUTHOR("E.S.H");
+MODULE_LICENSE("GPL");
+MODULE_DESCRIPTION("Minimal ADIOS for incremental debugging");
+
+// ==================== END: COPY AND PASTE THIS ENTIRE BLOCK INTO block/adios.c ====================
\ No newline at end of file
