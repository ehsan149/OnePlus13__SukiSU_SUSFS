diff --git a/block/Kconfig.iosched b/block/Kconfig.iosched
index 27f11320b..7e773b7f3 100644
--- a/block/Kconfig.iosched
+++ b/block/Kconfig.iosched
@@ -16,6 +16,20 @@ config MQ_IOSCHED_KYBER
 	  synchronous writes, it will self-tune queue depths to achieve that
 	  goal.
 
+config MQ_IOSCHED_ADIOS
+	tristate "Adaptive Deadline I/O scheduler"
+	default y
+	help
+	  The Adaptive Deadline I/O Scheduler (ADIOS) is a multi-queue I/O
+	  scheduler with learning-based adaptive latency control.
+
+config MQ_IOSCHED_DEFAULT_ADIOS
+	bool "Enable ADIOS I/O scheduler as default MQ I/O scheduler"
+	depends on MQ_IOSCHED_ADIOS=y
+	default y
+	help
+	  Enable the ADIOS I/O scheduler as the default scheduler for MQ I/O.
+	  
 config IOSCHED_BFQ
 	tristate "BFQ I/O scheduler"
 	select BLK_ICQ
diff --git a/block/Makefile b/block/Makefile
index 46ada9dc8..2fd10afba 100644
--- a/block/Makefile
+++ b/block/Makefile
@@ -23,6 +23,7 @@ obj-$(CONFIG_BLK_CGROUP_IOLATENCY)	+= blk-iolatency.o
 obj-$(CONFIG_BLK_CGROUP_IOCOST)	+= blk-iocost.o
 obj-$(CONFIG_MQ_IOSCHED_DEADLINE)	+= mq-deadline.o
 obj-$(CONFIG_MQ_IOSCHED_KYBER)	+= kyber-iosched.o
+obj-$(CONFIG_MQ_IOSCHED_ADIOS)	+= adios.o
 bfq-y				:= bfq-iosched.o bfq-wf2q.o bfq-cgroup.o
 obj-$(CONFIG_IOSCHED_BFQ)	+= bfq.o
 
diff --git a/block/adios.c b/block/adios.c
new file mode 100644
index 000000000..324003bf9
--- /dev/null
+++ b/block/adios.c
@@ -0,0 +1,203 @@
+// ==================== START: FINAL DEBUG VERSION 2 (Simplified Insert/Dispatch) ====================
+// SPDX-License-Identifier: GPL-2.0
+/*
+ * ADIOS - Incremental Debugging - Step 3
+ * Full data structures and init are present.
+ * Insert/Dispatch logic is simplified to bypass the deadline tree for testing.
+ */
+#include <linux/bio.h>
+#include <linux/blkdev.h>
+#include <linux/compiler.h>
+#include <linux/fs.h>
+#include <linux/init.h>
+#include <linux/kernel.h>
+#include <linux/math.h>
+#include <linux/module.h>
+#include <linux/rbtree.h>
+#include <linux/sbitmap.h>
+#include <linux/slab.h>
+#include <linux/timekeeping.h>
+#include <linux/percpu.h>
+#include <linux/string.h>
+
+#include "elevator.h"
+#include "blk.h"
+#include "blk-mq.h"
+#include "blk-mq-sched.h"
+
+#define ADIOS_VERSION "2.2.1-debug-step2"
+
+// --- Full Data Structures (from original ADIOS) ---
+struct dl_group {
+	struct rb_node node;
+	struct list_head rqs;
+	u64 deadline;
+};
+
+struct adios_rq_data {
+	struct list_head *dl_group;
+	struct list_head dl_node;
+	struct request *rq;
+	u64 deadline;
+	u64 pred_lat;
+	u32 block_size;
+};
+
+struct adios_data {
+	spinlock_t pq_lock;
+	struct list_head prio_queue; // We will use this simple list for the test
+
+	struct rb_root_cached dl_tree[2]; // Exists but we won't use it in this test
+	spinlock_t lock;
+	u8 dl_queued;
+
+	struct kmem_cache *rq_data_pool;
+	struct kmem_cache *dl_group_pool;
+
+	struct request_queue *queue;
+};
+
+// --- Stub and Helper Functions ---
+static void adios_init_icq(struct io_cq *icq) { /* Empty */ }
+static void adios_exit_icq(struct io_cq *icq) { /* Empty */ }
+
+
+// --- SIMPLIFIED (SAFE) Insert/Dispatch Logic for this test ---
+
+static struct request *adios_dispatch_request(struct blk_mq_hw_ctx *hctx) {
+	struct adios_data *ad = hctx->queue->elevator->elevator_data;
+	struct request *rq = NULL;
+
+	// Dispatch from the simple priority queue, bypassing all complex logic
+	spin_lock(&ad->pq_lock);
+	if (!list_empty(&ad->prio_queue)) {
+		rq = list_first_entry(&ad->prio_queue, struct request, queuelist);
+		list_del_init(&rq->queuelist);
+		rq->rq_flags |= RQF_STARTED;
+	}
+	spin_unlock(&ad->pq_lock);
+
+	return rq;
+}
+
+static void adios_insert_requests(struct blk_mq_hw_ctx *hctx, struct list_head *list, blk_insert_t flags) {
+	struct adios_data *ad = hctx->queue->elevator->elevator_data;
+
+	// Insert into the simple priority queue, bypassing the deadline tree
+	spin_lock(&ad->pq_lock);
+	list_splice_tail_init(list, &ad->prio_queue);
+	spin_unlock(&ad->pq_lock);
+
+	// Tell the scheduler to run to try and dispatch these
+	blk_mq_sched_mark_restart_hctx(hctx);
+}
+
+static bool adios_has_work(struct blk_mq_hw_ctx *hctx) {
+	struct adios_data *ad = hctx->queue->elevator->elevator_data;
+	return !list_empty_careful(&ad->prio_queue);
+}
+
+// --- Prepare/Finish requests (using the memory pools) ---
+
+static void adios_prepare_request(struct request *rq) {
+	struct adios_data *ad = rq->q->elevator->elevator_data;
+	if (ad && ad->rq_data_pool) {
+		rq->elv.priv[0] = kmem_cache_zalloc(ad->rq_data_pool, GFP_ATOMIC);
+	} else {
+		rq->elv.priv[0] = NULL;
+	}
+}
+
+static void adios_finish_request(struct request *rq) {
+	struct adios_data *ad = rq->q->elevator->elevator_data;
+	if (rq->elv.priv[0]) {
+		kmem_cache_free(ad->rq_data_pool, rq->elv.priv[0]);
+		rq->elv.priv[0] = NULL;
+	}
+}
+
+// --- Init / Exit and Final Elevator Definition ---
+
+static void adios_exit_sched(struct elevator_queue *e) {
+	struct adios_data *ad = e->elevator_data;
+	if (ad) {
+		kmem_cache_destroy(ad->rq_data_pool);
+		kmem_cache_destroy(ad->dl_group_pool);
+		kfree(ad);
+	}
+}
+
+static int adios_init_sched(struct request_queue *q, struct elevator_type *e) {
+	struct adios_data *ad;
+	struct elevator_queue *eq = elevator_alloc(q, e);
+	if (!eq) return -ENOMEM;
+
+	ad = kzalloc_node(sizeof(*ad), GFP_KERNEL, q->node);
+	if (!ad) { kobject_put(&eq->kobj); return -ENOMEM; }
+
+	ad->rq_data_pool = kmem_cache_create("adios_rq_data", sizeof(struct adios_rq_data), 0, SLAB_HWCACHE_ALIGN, NULL);
+	ad->dl_group_pool = kmem_cache_create("adios_dl_group", sizeof(struct dl_group), 0, SLAB_HWCACHE_ALIGN, NULL);
+	if (!ad->rq_data_pool || !ad->dl_group_pool) {
+		if (ad->rq_data_pool) kmem_cache_destroy(ad->rq_data_pool);
+		if (ad->dl_group_pool) kmem_cache_destroy(ad->dl_group_pool);
+		kfree(ad);
+		kobject_put(&eq->kobj);
+		return -ENOMEM;
+	}
+	
+	eq->elevator_data = ad;
+	ad->queue = q;
+
+	INIT_LIST_HEAD(&ad->prio_queue);
+	ad->dl_tree[0] = RB_ROOT_CACHED;
+	ad->dl_tree[1] = RB_ROOT_CACHED;
+	spin_lock_init(&ad->lock);
+	spin_lock_init(&ad->pq_lock);
+
+	blk_queue_flag_set(QUEUE_FLAG_SQ_SCHED, q);
+	q->elevator = eq;
+	return 0;
+}
+
+static ssize_t adios_version_show(struct elevator_queue *e, char *page) {
+    return sprintf(page, "%s\n", ADIOS_VERSION);
+}
+static struct elv_fs_entry adios_sched_attrs[] = {
+	__ATTR(adios_version, 0444, adios_version_show, NULL),
+	__ATTR_NULL
+};
+
+static struct elevator_type mq_adios = {
+	.ops = {
+		.insert_requests	= adios_insert_requests,
+		.dispatch_request	= adios_dispatch_request,
+		.prepare_request    = adios_prepare_request,
+        .finish_request     = adios_finish_request,
+		.has_work		    = adios_has_work,
+		.exit_sched		    = adios_exit_sched,
+		.init_sched		    = adios_init_sched,
+        .init_icq           = adios_init_icq,
+        .exit_icq           = adios_exit_icq,
+	},
+    .icq_size = sizeof(struct io_cq),
+    .icq_align = __alignof__(struct io_cq),
+    .elevator_attrs = adios_sched_attrs,
+	.elevator_name = "adios",
+	.elevator_owner = THIS_MODULE,
+};
+
+static int __init adios_init(void) {
+	return elv_register(&mq_adios);
+}
+static void __exit adios_exit(void) {
+	elv_unregister(&mq_adios);
+}
+
+module_init(adios_init);
+module_exit(adios_exit);
+
+MODULE_AUTHOR("E.S.H");
+MODULE_LICENSE("GPL");
+MODULE_DESCRIPTION("ADIOS I/O Scheduler");
+
+// ==================== END: FINAL DEBUG VERSION 2 (Simplified Insert/Dispatch) ====================
\ No newline at end of file
