name: OnePlus 13 Build v16
on:
  workflow_dispatch:
    inputs:
      RUNNER_TYPE:
        description: 'Select the runner for the build'
        required: true
        type: choice
        options:
        - Self-Hosted
        - GitHub-Hosted (16-core)
        default: 'Self-Hosted'
      KERNEL_NAME:
        description: "Custom kernel name suffix (e.g., -By-Ehsan149-4k)"
        required: true
        default: '-By-Ehsan149-4k'
      KERNEL_TIME:
        description: "Custom kernel build time (default: factory)"
        required: true
        default: '2024-12-17 23:36:49 UTC'
      enable_adios:
        description: "[EXPERIMENTAL] Enable ADIOS I/O Scheduler"
        required: false
        default: true
        type: boolean
      enable_le9uo:
        description: "[EXPERIMENTAL] Enable LE.9.0 Unofficial Patchset"
        required: false
        default: true
        type: boolean
      enable_feature_x: # KPM
        description: "Enable KPM support"
        required: false
        default: false
        type: boolean
      enable_feature_y: # LZ4KD for ZRAM
        description: "Enable LZ4KD compression for ZRAM (Kernel 6.6+)"
        required: false
        default: false
        type: boolean
      enable_feature_z: # FengChi driver
        description: "Enable FengChi driver (sched_ext)"
        required: false
        default: true
        type: boolean
      enable_esim:
        description: "Attempt to enable eSIM & Wireguard support (for Global devices)"
        required: false
        default: true
        type: boolean

jobs:
  build:
    runs-on: ${{ inputs.RUNNER_TYPE == 'Self-Hosted' && fromJSON('["self-hosted", "Linux", "X64", "oneplus-builder"]') || 'ubuntu-latest-16-cores' }}

    env:
      CCACHE_COMPILERCHECK: "%compiler% -dumpmachine; %compiler% -dumpversion"
      CCACHE_NOHASHDIR: "true"
      CCACHE_HARDLINK: "true"
      CCACHE_DIR: /home/runner/.ccache
      CCACHE_MAXSIZE: 8G
      FEIL: 'oneplus_13'
      ANDROID_VERSION: 'android15'
      KERNEL_VERSION: '6.6'
    outputs:
      zip_name: ${{ steps.prepare_zip.outputs.zip_filename }}

    steps:
      - name: Install Build Dependencies
        run: sudo apt-get update && sudo apt-get install -y git curl patch ccache pv lvm2
    
      - name: Maximize build space on GitHub Runner
        if: runner.hosted
        uses: easimon/maximize-build-space@master
        with:
          root-reserve-mb: 8192
          temp-reserve-mb: 2048
          remove-dotnet: 'true'
          remove-android: 'true'
          remove-haskell: 'true'
          remove-codeql: 'true'

      - name: Checkout Main Repo to get Patches
        uses: actions/checkout@v4
        with:
          path: main_repo

      
      - name: Cache and Restore Build Assets
        id: cache-sources
        uses: actions/cache@v4
        with:
          path: |
            ~/kernel_workspace
          key: build-assets-v1-${{ hashFiles('main_repo/**.patch') }}

      - name: Download and Setup Sources if not cached
        if: steps.cache-sources.outputs.cache-hit != 'true'
        run: |
          # 1. First, checkout the lightweight kernel source from your private repo
          echo "Cloning lightweight kernel source..."
          git clone --depth 1 https://ehsan149:${{ secrets.GH_PAT }}@github.com/ehsan149/op13-full-source.git ~/kernel_workspace
          # 2. Now, go to the directory where toolchains should be
          cd ~/kernel_workspace/kernel_platform
          echo "Downloading toolchain parts..."
          
          # ====================================================================
          # IMPORTANT: Paste the download links for your release parts here.
          # Write a separate curl line for each part.
          # ====================================================================
           AUTH_HEADER="Authorization: Bearer ${{ secrets.GH_PAT }}"
          curl -L -H "${AUTH_HEADER}" -o toolchains.part.00 "https://github.com/ehsan149/op13-full-source/releases/download/toolchains-v1/toolchains.part.00"
          curl -L -H "${AUTH_HEADER}" -o toolchains.part.01 "https://github.com/ehsan149/op13-full-source/releases/download/toolchains-v1/toolchains.part.01"
          curl -L -H "${AUTH_HEADER}" -o toolchains.part.02 "https://github.com/ehsan149/op13-full-source/releases/download/toolchains-v1/toolchains.part.02"
          curl -L -H "${AUTH_HEADER}" -o toolchains.part.03 "https://github.com/ehsan149/op13-full-source/releases/download/toolchains-v1/toolchains.part.03"
          curl -L -H "${AUTH_HEADER}" -o toolchains.part.04 "https://github.com/ehsan149/op13-full-source/releases/download/toolchains-v1/toolchains.part.04"
          curl -L -H "${AUTH_HEADER}" -o toolchains.part.05 "https://github.com/ehsan149/op13-full-source/releases/download/toolchains-v1/toolchains.part.05"
          curl -L -H "${AUTH_HEADER}" -o toolchains.part.06 "https://github.com/ehsan149/op13-full-source/releases/download/toolchains-v1/toolchains.part.06"
          curl -L -H "${AUTH_HEADER}" -o toolchains.part.07 "https://github.com/ehsan149/op13-full-source/releases/download/toolchains-v1/toolchains.part.07"
          curl -L -H "${AUTH_HEADER}" -o toolchains.part.08 "https://github.com/ehsan149/op13-full-source/releases/download/toolchains-v1/toolchains.part.08"
          curl -L -H "${AUTH_HEADER}" -o toolchains.part.09 "https://github.com/ehsan149/op13-full-source/releases/download/toolchains-v1/toolchains.part.09"
          curl -L -H "${AUTH_HEADER}" -o toolchains.part.10 "https://github.com/ehsan149/op13-full-source/releases/download/toolchains-v1/toolchains.part.10"
          curl -L -H "${AUTH_HEADER}" -o toolchains.part.11 "https://github.com/ehsan149/op13-full-source/releases/download/toolchains-v1/toolchains.part.11"
          curl -L -H "${AUTH_HEADER}" -o toolchains.part.12 "https://github.com/ehsan149/op13-full-source/releases/download/toolchains-v1/toolchains.part.12"
          curl -L -H "${AUTH_HEADER}" -o toolchains.part.13 "https://github.com/ehsan149/op13-full-source/releases/download/toolchains-v1/toolchains.part.13"
          curl -L -H "${AUTH_HEADER}" -o toolchains.part.14 "https://github.com/ehsan149/op13-full-source/releases/download/toolchains-v1/toolchains.part.14"
          curl -L -H "${AUTH_HEADER}" -o toolchains.part.15 "https://github.com/ehsan149/op13-full-source/releases/download/toolchains-v1/toolchains.part.15"
          
           
          echo "Reassembling toolchains..."
          cat toolchains.part.* > toolchains.tar.gz

          echo "Extracting toolchains..."
          tar -xzf toolchains.tar.gz
          
          echo "Cleaning up downloaded parts..."
          rm toolchains.part.* toolchains.tar.gz

      - name: Copy patches to build environment
        run: |
          cp -v $GITHUB_WORKSPACE/main_repo/*.patch ~/kernel_workspace/

      - name: Configure Git
        run: |
          git config --global user.name "ehsan149"
          git config --global user.email "ehsan149@yahoo.com"

      
      - name: Restore ccache
        uses: actions/cache@v3
        id: ccache
        with:
          path: ${{ env.CCACHE_DIR }}
          # This key is more effective. It saves a unique cache per branch.
          key: ccache-${{ inputs.RUNNER_TYPE }}-${{ env.FEIL }}-${{ env.KERNEL_VERSION }}-${{ github.ref }}
          restore-keys: |
            ccache-${{ inputs.RUNNER_TYPE }}-${{ env.FEIL }}-${{ env.KERNEL_VERSION }}
            ccache-${{ inputs.RUNNER_TYPE }}-${{ env.FEIL }}-

      - name: Setup ccache
        if: steps.ccache.outputs.cache-hit != 'true'
        run: |
          if [[ "${{ runner.hosted }}" == "false" ]]; then
            echo "Creating ccache directory and setting permissions for self-hosted runner..."
            sudo mkdir -p ${{ env.CCACHE_DIR }}
            sudo chown -R $USER:$USER ${{ env.CCACHE_DIR }}
          fi
          echo "Initializing ccache..."
          ccache -Cz
          ccache -M ${{ env.CCACHE_MAXSIZE }}
          echo "Ccache initialized and max size set to ${{ env.CCACHE_MAXSIZE }}."

      - name: Display ccache stats before operations
        run: |
          echo "Initial Ccache statistics:"
          ccache -s
      
      - name: Set up SukiSU
        run: |
          set -e
          cd ~/kernel_workspace/kernel_platform
          curl -LSs "https://raw.githubusercontent.com/SukiSU-Ultra/SukiSU-Ultra/susfs-1.5.8/kernel/setup.sh" | bash -s susfs-1.5.8
          cd ./KernelSU
          KSU_VERSION_VALUE=$(expr $(git rev-list --count main) + 10700)
          echo "KSUVER=${KSU_VERSION_VALUE}" >> $GITHUB_ENV
          sed -i "s/DKSU_VERSION=12800/DKSU_VERSION=${KSU_VERSION_VALUE}/" kernel/Makefile

      - name: Set up susfs
        run: |
          set -e
          cd ~/kernel_workspace/kernel_platform
          SUSFS_CLONE_TARGET_REL="../susfs4ksu"
          SUKISU_PATCH_CLONE_TARGET_REL="../SukiSU_patch"
          SUSFS_BRANCH="gki-${{ env.ANDROID_VERSION }}-${{ env.KERNEL_VERSION }}"
          git clone https://gitlab.com/simonpunk/susfs4ksu.git -b "${SUSFS_BRANCH}" "${SUSFS_CLONE_TARGET_REL}" --depth=1
          if [ ! -d "${SUSFS_CLONE_TARGET_REL}" ]; then echo "ERROR: Failed to clone susfs4ksu"; exit 1; fi
          git clone https://github.com/SukiSU-Ultra/SukiSU_patch.git "${SUKISU_PATCH_CLONE_TARGET_REL}" --depth=1
          if [ ! -d "${SUKISU_PATCH_CLONE_TARGET_REL}" ]; then echo "ERROR: Failed to clone SukiSU_patch"; exit 1; fi
          PATCH_FILE_NAME="50_add_susfs_in_${SUSFS_BRANCH}.patch"
          EXPECTED_PATCH_PATH="${SUSFS_CLONE_TARGET_REL}/kernel_patches/${PATCH_FILE_NAME}"
          if [ ! -f "${EXPECTED_PATCH_PATH}" ]; then
            echo "ERROR: SUSFS Patch file ${EXPECTED_PATCH_PATH} not found!"
            exit 1
          fi
          cp "${EXPECTED_PATCH_PATH}" ./common/
          cp "${SUSFS_CLONE_TARGET_REL}/kernel_patches/fs/"* ./common/fs/
          cp "${SUSFS_CLONE_TARGET_REL}/kernel_patches/include/linux/"* ./common/include/linux/
          cp -r "${SUKISU_PATCH_CLONE_TARGET_REL}/other/zram/lz4k/include/linux/"* ./common/include/linux/
          cp -r "${SUKISU_PATCH_CLONE_TARGET_REL}/other/zram/lz4k/lib/"* ./common/lib/
          cp -r "${SUKISU_PATCH_CLONE_TARGET_REL}/other/zram/lz4k/crypto/"* ./common/crypto/
          if ! ${{ inputs.enable_feature_y }}; then
            echo "LZ4KD is disabled, copying lz4k_oplus."
            cp -r "${SUKISU_PATCH_CLONE_TARGET_REL}/other/zram/lz4k_oplus" ./common/lib/
          else
            echo "LZ4KD is enabled, skipping lz4k_oplus to avoid potential conflict."
          fi
          cd ./common
          sed -i 's/-32,12 +32,38/-32,11 +32,37/g' "${PATCH_FILE_NAME}"
          sed -i '/#include <trace\/hooks\/fs.h>/d' "${PATCH_FILE_NAME}"
          patch -p1 < "${PATCH_FILE_NAME}" || echo "WARN: SUSFS base patch may not have applied cleanly."
          cp ../SukiSU_patch/hooks/syscall_hooks.patch ./
          patch -p1 -F 3 < syscall_hooks.patch
          echo "Finished 'Set up susfs' step."

      - name: Apply HMBird GKI patch
        run: |
          set -e
          echo "Applying HMBird GKI patch..."
          cd ~/kernel_workspace/kernel_platform/common/drivers
          cat << 'EOF' > hmbird_patch.c
          #include <linux/init.h>
          #include <linux/module.h>
          #include <linux/of.h>
          #include <linux/slab.h>
          #include <linux/string.h>
          static int __init hmbird_patch_init(void)
          {
                      struct device_node *ver_np;
                      const char *type;
                      int ret;
                      ver_np = of_find_node_by_path("/soc/oplus,hmbird/version_type");
                      if (!ver_np) {
                              pr_info("hmbird_patch: version_type node not found\n");
                              return 0;
                      }
                      ret = of_property_read_string(ver_np, "type", &type);
                      if (ret) {
                              pr_info("hmbird_patch: type property not found\n");
                              of_node_put(ver_np);
                              return 0;
                      }
                      if (strcmp(type, "HMBIRD_OGKI")) {
                              of_node_put(ver_np);
                              return 0;
                      }
                      struct property *prop = of_find_property(ver_np, "type", NULL);
                      if (prop) {
                              struct property *new_prop = kmalloc(sizeof(*prop), GFP_KERNEL);
                              if (!new_prop) {
                                      pr_info("hmbird_patch: kmalloc for new_prop failed\n");
                                      of_node_put(ver_np);
                                      return 0;
                              }
                              memcpy(new_prop, prop, sizeof(*prop));
                              new_prop->value = kmalloc(strlen("HMBIRD_GKI") + 1, GFP_KERNEL);
                              if (!new_prop->value) {
                                      pr_info("hmbird_patch: kmalloc for new_prop->value failed\n");
                                      kfree(new_prop);
                                      of_node_put(ver_np);
                                      return 0;
                              }
                              strcpy(new_prop->value, "HMBIRD_GKI");
                              new_prop->length = strlen("HMBIRD_GKI") + 1;
                              if (of_remove_property(ver_np, prop) != 0) {
                                     pr_info("hmbird_patch: of_remove_property failed\n");
                                     return 0;
                              }
                              if (of_add_property(ver_np, new_prop) !=0) {
                                     pr_info("hmbird_patch: of_add_property failed\n");
                                     return 0;
                              }
                              pr_info("hmbird_patch: success from HMBIRD_OGKI to HMBIRD_GKI\n");
                      } else {
                             pr_info("hmbird_patch: type property structure not found\n");
                      }
                      of_node_put(ver_np);
                      return 0;
          }
          early_initcall(hmbird_patch_init);
          MODULE_LICENSE("GPL");
          MODULE_AUTHOR("reigadegr");
          MODULE_DESCRIPTION("Forcefully convert HMBIRD_OGKI to HMBIRD_GKI.");
          EOF
          if ! grep -q "hmbird_patch.o" Makefile; then
            echo "obj-y += hmbird_patch.o" >> Makefile
          fi
          echo "HMBird patch file created."

      - name: Add sched_ext (FengChi driver)
        if: ${{ inputs.enable_feature_z == true }}
        run: |
         set -e
          echo "Adding sched_ext (FengChi driver)..."
          cd ~/kernel_workspace/kernel_platform/
          git clone https://github.com/HanKuCha/sched_ext.git ./sched_ext_temp --depth=1
          cp -r ./sched_ext_temp/* ./common/kernel/sched
          rm -rf ./sched_ext_temp

      - name: Apply Custom and Experimental Patches
        run: |
          set -e
          echo "Applying custom and experimental patches..."
          
          if ${{ inputs.enable_le9uo }}; then
            echo "Applying custom le9uo patch for kernel 6.6..."
            cd ~/kernel_workspace/kernel_platform/common
            # Using our final, fixed patch
            patch -p1 -F 3 < $GITHUB_WORKSPACE/main_repo/le9uo-final-v3.patch || echo "WARN: Custom le9uo patch failed to apply."
          fi

          if ${{ inputs.enable_adios }}; then
            echo "Setting up ADIOS I/O Scheduler from local source..."
            mkdir -p ~/kernel_workspace/kernel_platform/common/block/adios
            cp -r $GITHUB_WORKSPACE/main_repo/adios/* ~/kernel_workspace/kernel_platform/common/block/adios/
            cd ~/kernel_workspace/kernel_platform/common/block
            sed -i '/source "block\/bfq\/Kconfig"/a source "block/adios/Kconfig"' Kconfig
            sed -i '/obj-\$(CONFIG_BFQ_GROUP_IOSCHED)	+= bfq\//a obj-\$(CONFIG_IOSCHED_ADIOS)	+= adios\/' Makefile
            echo "ADIOS files integrated into source tree."
                        
          fi

      - name: Commit Custom Driver Changes
        run: |
          cd  ~/kernel_workspace/kernel_platform
          git add -A
          git commit -m "Add custom drivers (HMBird, Sched_ext, Experimental Patches)" --allow-empty || echo "No new changes to commit."
          echo "Finished applying custom drivers and committing changes."

      - name: Apply LZ4KD Patches for ZRAM (if enabled)
        if: ${{ inputs.enable_feature_y == true }}
        run: |
          set -e
          echo "LZ4KD for ZRAM is enabled. Applying patch..."
          SUKISU_PATCH_DIR=~/kernel_workspace/SukiSU_patch
          cd  ~/kernel_workspace/kernel_platform/common
          cp "${SUKISU_PATCH_DIR}/other/zram/zram_patch/${{ env.KERNEL_VERSION }}/lz4kd.patch" ./
          patch -p1 -F 3 < lz4kd.patch || echo "WARN: lz4kd patch for ZRAM failed."

      - name: Apply ECN and TCP Pacing Tweaks via SED
        run: |
          set -e
          TCP_IPV4_PATH="~/kernel_workspace/kernel_platform/common/net/ipv4/tcp_ipv4.c"
          if [ ! -f "$TCP_IPV4_PATH" ]; then echo "ERROR: $TCP_IPV4_PATH not found!"; exit 1; fi
          sed -i 's/net->ipv4.sysctl_tcp_ecn = 2;/net->ipv4.sysctl_tcp_ecn = 1;/' "$TCP_IPV4_PATH"
          sed -i 's/net->ipv4.sysctl_tcp_pacing_ss_ratio = 200;/net->ipv4.sysctl_tcp_pacing_ss_ratio = 150;/' "$TCP_IPV4_PATH"
          sed -i 's/net->ipv4.sysctl_tcp_pacing_ca_ratio = 120;/net->ipv4.sysctl_tcp_pacing_ca_ratio = 110;/' "$TCP_IPV4_PATH"
          echo "ECN and TCP Pacing tweaks successfully applied."

      - name: Add Kernel Configuration Settings and Custom Kernel Name
        run: |
          set -e
          cd ~/kernel_workspace/kernel_platform
          DEFCONFIG_PATH="./common/arch/arm64/configs/gki_defconfig"
          
          echo "CONFIG_KSU=y" >> "${DEFCONFIG_PATH}"
          echo "CONFIG_KSU_SUSFS_SUS_SU=n" >> "${DEFCONFIG_PATH}"
          echo "CONFIG_KSU_MANUAL_HOOK=y" >> "${DEFCONFIG_PATH}" 
          echo "CONFIG_KSU_SUSFS=y" >> "${DEFCONFIG_PATH}"
          echo "CONFIG_KSU_SUSFS_HAS_MAGIC_MOUNT=y" >> "${DEFCONFIG_PATH}"
          echo "CONFIG_KSU_SUSFS_SUS_PATH=y" >> "${DEFCONFIG_PATH}"
          echo "CONFIG_KSU_SUSFS_SUS_MOUNT=y" >> "${DEFCONFIG_PATH}"
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_KSU_DEFAULT_MOUNT=y" >> "${DEFCONFIG_PATH}"
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_BIND_MOUNT=y" >> "${DEFCONFIG_PATH}"
          echo "CONFIG_KSU_SUSFS_SUS_KSTAT=y" >> "${DEFCONFIG_PATH}"
          echo "CONFIG_KSU_SUSFS_SUS_OVERLAYFS=n" >> "${DEFCONFIG_PATH}"
          echo "CONFIG_KSU_SUSFS_TRY_UMOUNT=y" >> "${DEFCONFIG_PATH}"
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_TRY_UMOUNT_FOR_BIND_MOUNT=y" >> "${DEFCONFIG_PATH}"
          echo "CONFIG_KSU_SUSFS_SPOOF_UNAME=y" >> "${DEFCONFIG_PATH}"
          echo "CONFIG_KSU_SUSFS_ENABLE_LOG=y" >> "${DEFCONFIG_PATH}"
          echo "CONFIG_KSU_SUSFS_HIDE_KSU_SUSFS_SYMBOLS=y" >> "${DEFCONFIG_PATH}"
          echo "CONFIG_KSU_SUSFS_SPOOF_CMDLINE_OR_BOOTCONFIG=y" >> "${DEFCONFIG_PATH}"
          echo "CONFIG_KSU_SUSFS_OPEN_REDIRECT=y" >> "${DEFCONFIG_PATH}"
          echo "CONFIG_CRYPTO_LZ4HC=y" >> "${DEFCONFIG_PATH}"
          echo "CONFIG_CRYPTO_LZ4K=y" >> "${DEFCONFIG_PATH}" 
          echo "CONFIG_CRYPTO_842=y" >> "${DEFCONFIG_PATH}"
          echo "CONFIG_TCP_CONG_ADVANCED=y" >> "${DEFCONFIG_PATH}"
          echo "CONFIG_TCP_CONG_BBR=y" >> "${DEFCONFIG_PATH}"
          echo "CONFIG_DEFAULT_BBR=y" >> "${DEFCONFIG_PATH}" 
          echo 'CONFIG_DEFAULT_TCP_CONG="bbr"' >> "${DEFCONFIG_PATH}"
          echo "CONFIG_NET_SCH_FQ=y" >> "${DEFCONFIG_PATH}" 
          echo "CONFIG_DEFAULT_FQ=y" >> "${DEFCONFIG_PATH}" 
          echo 'CONFIG_DEFAULT_NET_SCH="fq"' >> "${DEFCONFIG_PATH}"
          echo "CONFIG_TCP_CONG_BIC=n" >> "${DEFCONFIG_PATH}"
          echo "CONFIG_TCP_CONG_CUBIC=n" >> "${DEFCONFIG_PATH}"
          echo "CONFIG_TCP_CONG_WESTWOOD=n" >> "${DEFCONFIG_PATH}"
          echo "CONFIG_TCP_CONG_HTCP=n" >> "${DEFCONFIG_PATH}"
          echo "CONFIG_IP_NF_TARGET_TTL=y" >> "${DEFCONFIG_PATH}" 
          echo "CONFIG_IP6_NF_TARGET_HL=y" >> "${DEFCONFIG_PATH}" 
          echo "CONFIG_IP6_NF_MATCH_HL=y" >> "${DEFCONFIG_PATH}" 
          echo "CONFIG_IP_NF_TARGET_ECN=y" >> "${DEFCONFIG_PATH}"
          if [ "${{ env.KERNEL_VERSION }}" != "5.10" ]; then
            echo "CONFIG_ZRAM_DEF_COMP_LZORLE=n" >> "${DEFCONFIG_PATH}"
            echo "CONFIG_ZRAM_DEF_COMP_LZO=n" >> "${DEFCONFIG_PATH}"
            if ${{ inputs.enable_feature_y }}; then 
              echo "CONFIG_CRYPTO_LZ4KD=y" >> "${DEFCONFIG_PATH}" 
              echo "# LZ4KD for ZRAM is enabled via feature flag" >> "${DEFCONFIG_PATH}"
              echo "CONFIG_ZRAM_DEF_COMP_LZ4=n" >> "${DEFCONFIG_PATH}" 
              echo "CONFIG_ZRAM_DEF_COMP_LZ4KD=y" >> "${DEFCONFIG_PATH}"
              echo 'CONFIG_ZRAM_DEF_COMP="lz4kd"' >> "${DEFCONFIG_PATH}"
            else
              sed -i '/CONFIG_CRYPTO_LZ4KD/d' "${DEFCONFIG_PATH}" 
              echo "# CONFIG_CRYPTO_LZ4KD is not set" >> "${DEFCONFIG_PATH}"
              echo "# Standard LZ4 for ZRAM" >> "${DEFCONFIG_PATH}"
              echo "CONFIG_ZRAM_DEF_COMP_LZ4=y" >> "${DEFCONFIG_PATH}" 
              echo 'CONFIG_ZRAM_DEF_COMP="lz4"' >> "${DEFCONFIG_PATH}"
            fi
          else 
            echo "# Default ZRAM compression for Kernel 5.10 (e.g., LZ4)" >> "${DEFCONFIG_PATH}"
            echo "CONFIG_ZRAM_DEF_COMP_LZ4=y" >> "${DEFCONFIG_PATH}" 
            echo 'CONFIG_ZRAM_DEF_COMP="lz4"' >> "${DEFCONFIG_PATH}"
            sed -i '/CONFIG_CRYPTO_LZ4KD/d' "${DEFCONFIG_PATH}" 
            echo "# CONFIG_CRYPTO_LZ4KD is not set" >> "${DEFCONFIG_PATH}"
          fi
          echo "CONFIG_RCU_TRACE=n" >> "${DEFCONFIG_PATH}"
          echo "CONFIG_HIBERNATION=y" >> "${DEFCONFIG_PATH}"
          echo "CONFIG_HIBERNATION_COMPRESS=y" >> "${DEFCONFIG_PATH}"
          echo "CONFIG_HIBERNATION_COMPRESS_ALGO_LZ4=y" >> "${DEFCONFIG_PATH}"
          echo "CONFIG_TMPFS_XATTR=y" >> "${DEFCONFIG_PATH}"
          echo "CONFIG_TMPFS_POSIX_ACL=y" >> "${DEFCONFIG_PATH}"
          
          # Add ADIOS config if enabled
          if ${{ inputs.enable_adios }}; then
            echo "# [EXPERIMENTAL] ADIOS I/O Scheduler Settings" >> "${DEFCONFIG_PATH}"
            echo "CONFIG_IOSCHED_ADIOS=y" >> "${DEFCONFIG_PATH}"
            echo "CONFIG_DEFAULT_IOSCHED=\"adios\"" >> "${DEFCONFIG_PATH}"
          fi
          
          # Add KPM config if enabled
          if ${{ inputs.enable_feature_x == true }}; then
            echo "# KPM Support" >> "${DEFCONFIG_PATH}"
            echo "CONFIG_KPM=y" >> "${DEFCONFIG_PATH}"
          fi
          
          # Add eSIM config if enabled
          if ${{ inputs.enable_esim }}; then
            echo "# eSIM and Wireguard Dependencies" >> "${DEFCONFIG_PATH}"
            echo "CONFIG_WIREGUARD=y" >> "${DEFCONFIG_PATH}"
            echo "CONFIG_INET=y" >> "${DEFCONFIG_PATH}" 
            echo "CONFIG_NET_UDP_TUNNEL=y" >> "${DEFCONFIG_PATH}" 
            echo "CONFIG_CRYPTO_LIB_CHACHA20POLY1305=y" >> "${DEFCONFIG_PATH}" 
            echo "CONFIG_CRYPTO_LIB_POLY1305=y" >> "${DEFCONFIG_PATH}" 
            echo "CONFIG_CRYPTO_LIB_CURVE25519=y" >> "${DEFCONFIG_PATH}" 
            echo "CONFIG_EUICC_GSMA=y" >> "${DEFCONFIG_PATH}"
            echo "CONFIG_EUICC_HTTP=y" >> "${DEFCONFIG_PATH}"
          else
            echo "# eSIM and Wireguard support disabled by user" >> "${DEFCONFIG_PATH}"
            sed -i '/CONFIG_WIREGUARD/d' "${DEFCONFIG_PATH}"
            sed -i '/CONFIG_EUICC/d' "${DEFCONFIG_PATH}"
          fi
          
          # Kernel Name defconfig settings
          echo "Modifying defconfig for custom kernel name..."
          sed -i '/CONFIG_LOCALVERSION_AUTO/d' "${DEFCONFIG_PATH}"
          echo "CONFIG_LOCALVERSION_AUTO=n" >> "${DEFCONFIG_PATH}"
          sed -i '/CONFIG_LOCALVERSION=/d' "${DEFCONFIG_PATH}"
          echo "CONFIG_LOCALVERSION=\"${{ inputs.KERNEL_NAME }}\"" >> "${DEFCONFIG_PATH}"
          echo "Defconfig set: CONFIG_LOCALVERSION=\"${{ inputs.KERNEL_NAME }}\""
          
          sudo sed -i 's/check_defconfig//' ./common/build.config.gki
          cd common
          git add -A && git commit -m "Update defconfig with all features and custom settings" --allow-empty || echo "No defconfig changes to commit."

      - name: Apply Hide Stuff Patch
        run: |
          set -e
          echo "Applying hide_stuff patch from local source..."
          cd ~/kernel_workspace/kernel_platform/common
          patch -p1 --no-backup-if-mismatch < $GITHUB_WORKSPACE/main_repo/69_hide_stuff.patch || echo "WARN: 69_hide_stuff.patch failed or applied with issues."
                      
         
      - name: Set Kernel build timestamp
        run: |
          export SOURCE_DATE_EPOCH=$(date -d "${{ inputs.KERNEL_TIME }}" +%s)
          echo "SOURCE_DATE_EPOCH=$SOURCE_DATE_EPOCH" >> $GITHUB_ENV

      - name: Build Kernel
        run: |
            set -e
            cd ~/kernel_workspace/kernel_platform
            export SOURCE_DATE_EPOCH=${{ env.SOURCE_DATE_EPOCH }}
            export PATH="/usr/lib/ccache:$PATH"
            echo "Using CCACHE directory: $CCACHE_DIR"
            echo "Ccache statistics before build:"
            ccache -s
            tools/bazel run --config=fast --config=stamp --lto=thin --verbose_failures //common:kernel_aarch64_dist -- --dist_dir=dist
            
            echo "Ccache statistics after build:"
            ccache -s

      - name: Make AnyKernel3 (Patch Image)
        run: |
         set -e
          cd ~/kernel_workspace/kernel_platform/dist/
          curl -LO https://github.com/SukiSU-Ultra/SukiSU_KernelPatch_patch/releases/download/0.12.0/patch_linux
          chmod +x patch_linux
          ./patch_linux
          if [ -f "oImage" ]; then
            rm -f Image
            mv oImage Image
          else
            echo "WARN: oImage not found. Assuming patch_linux modified Image in-place or did not create oImage."
          fi

      - name: Prepare AnyKernel3 Zip
        id: prepare_zip
        run: |
         set -e
          cd $GITHUB_WORKSPACE
          
          FINAL_ZIP_NAME="SuKiSu_GKI_${KSUVER}_${{ env.FEIL }}"
          if ${{ inputs.enable_adios }}; then FINAL_ZIP_NAME="${FINAL_ZIP_NAME}_ADIOS"; fi
          if ${{ inputs.enable_le9uo }}; then FINAL_ZIP_NAME="${FINAL_ZIP_NAME}_LE9UO"; fi
          if ${{ inputs.enable_feature_z }}; then FINAL_ZIP_NAME="${FINAL_ZIP_NAME}_FengChi"; fi
          if ${{ inputs.enable_feature_y }}; then FINAL_ZIP_NAME="${FINAL_ZIP_NAME}_LZ4KD"; else FINAL_ZIP_NAME="${FINAL_ZIP_NAME}_LZ4"; fi
          if ${{ inputs.enable_esim }}; then FINAL_ZIP_NAME="${FINAL_ZIP_NAME}_eSIM"; fi
          FINAL_ZIP_NAME="${FINAL_ZIP_NAME}_BBR_ECN"
          if ${{ inputs.enable_feature_x }}; then FINAL_ZIP_NAME="${FINAL_ZIP_NAME}_KPM"; fi
          FINAL_ZIP_NAME="${FINAL_ZIP_NAME}_ehsan149.zip"
          
          echo "Generated ZIP filename: ${FINAL_ZIP_NAME}"
          echo "zip_filename=${FINAL_ZIP_NAME}" >> $GITHUB_OUTPUT
          git clone https://github.com/HanKuCha/AnyKernel3.git AnyKernel3_Package --depth=1
          rm -rf ./AnyKernel3_Package/.git
          rm -rf ./AnyKernel3_Package/push.sh
          KERNEL_IMAGE_PATH="~/kernel_workspace/kernel_platform/dist/Image"
          if [ -f "$KERNEL_IMAGE_PATH" ]; then
            "$KERNEL_IMAGE_PATH" ./AnyKernel3_Package/
            echo "Image copied to AnyKernel3_Package."
          else
            echo "ERROR: Kernel Image not found for AnyKernel3 packaging!"
            exit 1
          fi
          
          cd AnyKernel3_Package
          zip -r9 "../${FINAL_ZIP_NAME}" .
          cd ..
        env:
          KSUVER: ${{ env.KSUVER }}

      - name: Upload AnyKernel3 Zip
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.prepare_zip.outputs.zip_filename }}
          path: ${{ steps.prepare_zip.outputs.zip_filename }}
          
