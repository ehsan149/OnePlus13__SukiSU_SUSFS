name: OnePlus 13 Build v2
on:
  workflow_dispatch:
    inputs:
      CPU:
        description: "Select compilation CPU type"
        required: true
        default: 'sm8750'
      FEIL:
        description: "Device configuration"
        required: true
        default: 'oneplus_13'
      CPUD:
        description: "Processor codename"
        required: true
        default: 'sun'
      ANDROID_VERSION:
        description: "Kernel Android Version"
        required: true
        default: 'android15'
      KERNEL_VERSION:
        description: "Kernel version"
        required: true
        default: '6.6'
      KERNEL_NAME: 
        description: "Custom kernel name (e.g., -MyKernel-v1)" # Example: -MyKernel-v1
        required: true
        default: '-By-Ehsan149-4k' 
      KERNEL_TIME:
       description: "Custom kernel build time (default: factory)"
       required: true
       default: 'Tue Dec 17 23:36:49 UTC 2024' # Date format used by HanKuCha
      enable_feature_x:
       description: "Enable KPM support"
       required: false
       default: false
       type: boolean
      enable_feature_y:
       description: "Enable lz4kd compression"
       required: false
       default: false
       type: boolean
      enable_feature_z:
       description: "Enable FengChi driver (sched_ext)" # This is sched_ext
       required: false
       default: false
       type: boolean
      
jobs:
  build:
    runs-on: ubuntu-latest
    env:
      CCACHE_COMPILERCHECK: "%compiler% -dumpmachine; %compiler% -dumpversion"
      CCACHE_NOHASHDIR: "true"
      CCACHE_HARDLINK: "true"
      CCACHE_DIR: /home/runner/.ccache  # From HanKuCha
      CCACHE_MAXSIZE: 8G             # From HanKuCha
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4

      - name: Maximize build space
        uses: easimon/maximize-build-space@master
        with:
          root-reserve-mb: 8192 
          temp-reserve-mb: 2048 
          remove-dotnet: 'true'
          remove-android: 'true'
          remove-haskell: 'true'
          remove-codeql: 'true'
          
      - name: Configure Git
        run: |
         git config --global user.name "ehsan149" 
         git config --global user.email "ehsan149@yahoo.com" 

      - name: Install dependencies
        run: |
         sudo apt update && sudo apt upgrade -y
         sudo apt install -y python3 git curl patch ccache # ccache added

      - name: Restore ccache
        uses: actions/cache@v3
        id: ccache # Give an id to check cache-hit status later
        with:
          path: ${{ env.CCACHE_DIR }} 
          key: ccache-${{ runner.os }}-${{ github.ref }}-${{ github.sha }} # More specific key
          restore-keys: |
            ccache-${{ runner.os }}-${{ github.ref }}-
            ccache-${{ runner.os }}-
      
      - name: Setup ccache
        # This step runs if ccache was not restored from a previous run for this exact commit
        if: steps.ccache.outputs.cache-hit != 'true'
        run: |
          echo "No ccache found for this commit, or cache is from a different branch/OS. Initializing ccache."
          ccache -Cz # Clear ccache statistics (zeroes counters)
          ccache -M ${{ env.CCACHE_MAXSIZE }} # Set max size
          echo "Ccache initialized and max size set to ${{ env.CCACHE_MAXSIZE }}."

      - name: Install repo tool
        run: |
         mkdir -p $GITHUB_WORKSPACE/bin
         curl -sSL https://storage.googleapis.com/git-repo-downloads/repo > $GITHUB_WORKSPACE/bin/repo
         chmod a+x $GITHUB_WORKSPACE/bin/repo
         echo "$GITHUB_WORKSPACE/bin" >> $GITHUB_PATH
         repo --version || echo "WARN: repo --version failed after installation attempt."

      - name: Clone TheWildJames Patches Repo (for 69_hide_stuff.patch)
        run: |
          git clone https://github.com/TheWildJames/kernel_patches.git TheWildJames_kernel_patches --depth=1

      - name: Initialize repo and sync
        run: |
         set -e 
         which repo || (echo "ERROR: 'which repo' did not find repo in PATH" && exit 1)
         
         mkdir kernel_workspace && cd kernel_workspace
         repo init -u https://github.com/JiuGeFaCai/kernel_manifest.git -b refs/heads/oneplus/${{ github.event.inputs.CPU }} -m ${{ github.event.inputs.FEIL }}.xml --depth=1
         repo --trace sync -c -j$(nproc --all) --no-tags --no-clone-bundle --optimized-fetch --fail-fast
         rm kernel_platform/common/android/abi_gki_protected_exports_* || echo "No protected exports!"
         rm kernel_platform/msm-kernel/android/abi_gki_protected_exports_* || echo "No protected exports!"
         
      - name: Set up SukiSU
        run: |
         set -e
         cd $GITHUB_WORKSPACE/kernel_workspace/kernel_platform
         curl -LSs "https://raw.githubusercontent.com/ShirkNeko/SukiSU-Ultra/main/kernel/setup.sh" | bash -s susfs-dev
         cd ./KernelSU
         KSU_VERSION=$(expr $(/usr/bin/git rev-list --count main) "+" 10606) 
         echo "KSUVER=$KSU_VERSION" >> $GITHUB_ENV
         sed -i "s/DKSU_VERSION=12800/DKSU_VERSION=${KSU_VERSION}/" kernel/Makefile 
        
      - name: Set up susfs
        run: |
           set -e 
           cd $GITHUB_WORKSPACE/kernel_workspace/kernel_platform

           SUSFS_CLONE_TARGET_REL="../susfs4ksu" 
           SUKISU_PATCH_CLONE_TARGET_REL="../SukiSU_patch"
           SUSFS_BRANCH="gki-${{ github.event.inputs.ANDROID_VERSION }}-${{ github.event.inputs.KERNEL_VERSION }}"

           git clone https://gitlab.com/simonpunk/susfs4ksu.git -b "${SUSFS_BRANCH}" "${SUSFS_CLONE_TARGET_REL}" --depth=1
           if [ ! -d "${SUSFS_CLONE_TARGET_REL}" ]; then echo "ERROR: Failed to clone susfs4ksu"; exit 1; fi

           git clone https://github.com/ShirkNeko/SukiSU_patch.git "${SUKISU_PATCH_CLONE_TARGET_REL}" --depth=1
           if [ ! -d "${SUKISU_PATCH_CLONE_TARGET_REL}" ]; then echo "ERROR: Failed to clone SukiSU_patch"; exit 1; fi

           PATCH_FILE_NAME="50_add_susfs_in_${SUSFS_BRANCH}.patch" 
           EXPECTED_PATCH_PATH="${SUSFS_CLONE_TARGET_REL}/kernel_patches/${PATCH_FILE_NAME}"

           if [ ! -f "${EXPECTED_PATCH_PATH}" ]; then
               echo "ERROR: SUSFS Patch file ${EXPECTED_PATCH_PATH} not found!"
               exit 1
           fi
           
           cp "${EXPECTED_PATCH_PATH}" ./common/
           cp "${SUSFS_CLONE_TARGET_REL}/kernel_patches/fs/"* ./common/fs/
           cp "${SUSFS_CLONE_TARGET_REL}/kernel_patches/include/linux/"* ./common/include/linux/
           cp -r "${SUKISU_PATCH_CLONE_TARGET_REL}/other/zram/lz4k/include/linux/"* ./common/include/linux/
           cp -r "${SUKISU_PATCH_CLONE_TARGET_REL}/other/zram/lz4k/lib/"* ./common/lib/
           cp -r "${SUKISU_PATCH_CLONE_TARGET_REL}/other/zram/lz4k/crypto/"* ./common/crypto/
           cp -r "${SUKISU_PATCH_CLONE_TARGET_REL}/other/zram/lz4k_oplus" ./common/lib/
           
           cd ./common 

           sed -i 's/-32,12 +32,38/-32,11 +32,37/g' "${PATCH_FILE_NAME}"
           sed -i '/#include <trace\/hooks\/fs.h>/d' "${PATCH_FILE_NAME}"

           patch -p1 < "${PATCH_FILE_NAME}" || echo "WARN: SUSFS base patch may not have applied cleanly."
           cp "${GITHUB_WORKSPACE}/kernel_workspace/SukiSU_patch/hooks/syscall_hooks.patch" ./ 
           patch -p1 -F 3 < syscall_hooks.patch
           echo "Finished 'Set up susfs' step."

      - name: Apply HMBird GKI patch
        run: |
         set -e
         echo "Applying HMBird GKI patch..."
         HMBIRD_PATCH_DIR="$GITHUB_WORKSPACE/kernel_workspace/kernel_platform/common/drivers"
         mkdir -p "$HMBIRD_PATCH_DIR" 
         cd "$HMBIRD_PATCH_DIR"
         # Create the hmbird_patch.c file
         cat << 'EOF' > hmbird_patch.c
         #include <linux/init.h>
         #include <linux/module.h>
         #include <linux/of.h>
         #include <linux/slab.h>
         #include <linux/string.h>

         static int __init hmbird_patch_init(void)
         {
             struct device_node *ver_np;
             const char *type;
             int ret;

             ver_np = of_find_node_by_path("/soc/oplus,hmbird/version_type");
             if (!ver_np) {
                 pr_info("hmbird_patch: version_type node not found, skipping patch.\n");
                 return 0;
             }

             ret = of_property_read_string(ver_np, "type", &type);
             if (ret) {
                 pr_info("hmbird_patch: type property not found, skipping patch.\n");
                 of_node_put(ver_np);
                 return 0;
             }

             if (strcmp(type, "HMBIRD_OGKI")) {
                 pr_info("hmbird_patch: type is not HMBIRD_OGKI, skipping patch. Current type: %s\n", type);
                 of_node_put(ver_np);
                 return 0;
             }

             // This part attempts to modify a device tree property at runtime.
             // It's generally safer and more robust to modify the DTS/DTSI files directly
             // and recompile the DTB, or use a DTBO.
             // However, sticking to HanKuCha's method for now.
             struct property *prop = of_find_property(ver_np, "type", NULL);
             if (prop) {
                 char *new_value = kmalloc(strlen("HMBIRD_GKI") + 1, GFP_KERNEL);
                 if (!new_value) {
                     pr_err("hmbird_patch: kmalloc for new_value failed\n");
                     of_node_put(ver_np);
                     return -ENOMEM;
                 }
                 strcpy(new_value, "HMBIRD_GKI");

                 // Create a new property struct to replace the old one
                 struct property *new_prop_st = kmalloc(sizeof(*new_prop_st), GFP_KERNEL);
                 if (!new_prop_st) {
                     pr_err("hmbird_patch: kmalloc for new_prop_st failed\n");
                     kfree(new_value);
                     of_node_put(ver_np);
                     return -ENOMEM;
                 }
                 // Copy original property attributes (name, flags, etc.)
                 memcpy(new_prop_st, prop, sizeof(*new_prop_st)); 
                 // Assign new value and length
                 new_prop_st->value = new_value;
                 new_prop_st->length = strlen("HMBIRD_GKI") + 1;

                 // Remove the old property
                 if (of_remove_property(ver_np, prop) != 0) {
                    pr_err("hmbird_patch: of_remove_property failed\n");
                    kfree(new_value);
                    kfree(new_prop_st);
                    of_node_put(ver_np); 
                    return -EINVAL; 
                 }
                 // prop itself is now unlinked. Its original value (if it was const char*) is not our responsibility to free.
                 
                 // Add the new property
                 if (of_add_property(ver_np, new_prop_st) !=0) {
                    pr_err("hmbird_patch: of_add_property failed\n");
                    kfree(new_value); // new_prop_st->value
                    kfree(new_prop_st); 
                    of_node_put(ver_np);
                    return -EINVAL; 
                 }
                 pr_info("hmbird_patch: success from HMBIRD_OGKI to HMBIRD_GKI\n");
            } else {
                 pr_info("hmbird_patch: 'type' property found but could not be read as struct, skipping.\n");
            }
            of_node_put(ver_np); // Release the node reference
            return 0;
            }
            early_initcall(hmbird_patch_init);
            MODULE_LICENSE("GPL");
            MODULE_AUTHOR("reigadegr"); // Author from HanKuCha's script
            MODULE_DESCRIPTION("Forcefully convert HMBIRD_OGKI to HMBIRD_GKI.");
EOF
         # Add to Makefile in drivers directory to compile this new .c file
         if ! grep -q "hmbird_patch.o" Makefile; then
           echo "obj-y += hmbird_patch.o" >> Makefile
           echo "HMBird patch added to drivers/Makefile."
         else
           echo "HMBird patch already in drivers/Makefile."
         fi
         # Commit the changes to the source tree so they are included in the build
         cd $GITHUB_WORKSPACE/kernel_workspace/kernel_platform # Go to the root of the kernel platform git repo
         # Check if there are actual changes to hmbird_patch.c or the Makefile
         if git status --porcelain | grep -q "common/drivers/hmbird_patch.c\|common/drivers/Makefile"; then
            echo "Committing HMBird patch changes..."
            git add common/drivers/hmbird_patch.c common/drivers/Makefile
            git commit -m "Add HMBird GKI patch module"
         else
            echo "No new HMBird files or Makefile changes to commit."
         fi
         echo "Finished HMBird GKI patch application and commit."

      - name: Apply lz4kd Patches
        if: ${{inputs.enable_feature_y }}
        run: |
          set -e
          cd $GITHUB_WORKSPACE/kernel_workspace/kernel_platform/common
          cp "${GITHUB_WORKSPACE}/kernel_workspace/SukiSU_patch/other/zram/zram_patch/${{ github.event.inputs.KERNEL_VERSION }}/lz4kd.patch" ./
          patch -p1 -F 3 < lz4kd.patch || echo "WARN: lz4kd patch failed."
      
      - name: Apply ECN and TCP Pacing Tweaks via SED
        run: |
          set -e
          TCP_IPV4_PATH="$GITHUB_WORKSPACE/kernel_workspace/kernel_platform/common/net/ipv4/tcp_ipv4.c"
          if [ ! -f "$TCP_IPV4_PATH" ]; then echo "ERROR: $TCP_IPV4_PATH not found!"; exit 1; fi

          sed -i 's/net->ipv4.sysctl_tcp_ecn = 2;/net->ipv4.sysctl_tcp_ecn = 1;/' "$TCP_IPV4_PATH"
          sed -i 's/net->ipv4.sysctl_tcp_pacing_ss_ratio = 200;/net->ipv4.sysctl_tcp_pacing_ss_ratio = 150;/' "$TCP_IPV4_PATH"
          sed -i 's/net->ipv4.sysctl_tcp_pacing_ca_ratio = 120;/net->ipv4.sysctl_tcp_pacing_ca_ratio = 110;/' "$TCP_IPV4_PATH"
          echo "ECN and TCP Pacing tweaks successfully applied via SED."
          
      - name: Add Kernel Configuration Settings and Custom Kernel Name
        run: |
          set -e
          cd $GITHUB_WORKSPACE/kernel_workspace/kernel_platform
          DEFCONFIG_PATH="./common/arch/arm64/configs/gki_defconfig"
          
          echo "CONFIG_KSU=y" >> "${DEFCONFIG_PATH}"
          echo "CONFIG_KSU_SUSFS_SUS_SU=n" >> "${DEFCONFIG_PATH}"
          echo "CONFIG_KSU_MANUAL_HOOK=y" >> "${DEFCONFIG_PATH}"
          echo "CONFIG_KSU_SUSFS=y" >> "${DEFCONFIG_PATH}"
          echo "CONFIG_KSU_SUSFS_HAS_MAGIC_MOUNT=y" >> "${DEFCONFIG_PATH}"
          echo "CONFIG_KSU_SUSFS_SUS_PATH=y" >> "${DEFCONFIG_PATH}"
          echo "CONFIG_KSU_SUSFS_SUS_MOUNT=y" >> "${DEFCONFIG_PATH}"
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_KSU_DEFAULT_MOUNT=y" >> "${DEFCONFIG_PATH}"
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_BIND_MOUNT=y" >> "${DEFCONFIG_PATH}"
          echo "CONFIG_KSU_SUSFS_SUS_KSTAT=y" >> "${DEFCONFIG_PATH}"
          echo "CONFIG_KSU_SUSFS_SUS_OVERLAYFS=n" >> "${DEFCONFIG_PATH}"
          echo "CONFIG_KSU_SUSFS_TRY_UMOUNT=y" >> "${DEFCONFIG_PATH}"
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_TRY_UMOUNT_FOR_BIND_MOUNT=y" >> "${DEFCONFIG_PATH}"
          echo "CONFIG_KSU_SUSFS_SPOOF_UNAME=y" >> "${DEFCONFIG_PATH}"
          echo "CONFIG_KSU_SUSFS_ENABLE_LOG=y" >> "${DEFCONFIG_PATH}"
          echo "CONFIG_KSU_SUSFS_HIDE_KSU_SUSFS_SYMBOLS=y" >> "${DEFCONFIG_PATH}"
          echo "CONFIG_KSU_SUSFS_SPOOF_CMDLINE_OR_BOOTCONFIG=y" >> "${DEFCONFIG_PATH}"
          echo "CONFIG_KSU_SUSFS_OPEN_REDIRECT=y" >> "${DEFCONFIG_PATH}"
          echo "CONFIG_CRYPTO_LZ4HC=y" >> "${DEFCONFIG_PATH}"
          echo "CONFIG_CRYPTO_LZ4K=y" >> "${DEFCONFIG_PATH}"
          echo "CONFIG_CRYPTO_LZ4KD=y" >> "${DEFCONFIG_PATH}"
          echo "CONFIG_CRYPTO_842=y" >> "${DEFCONFIG_PATH}"
          echo "CONFIG_TCP_CONG_ADVANCED=y" >> "${DEFCONFIG_PATH}"
          echo "CONFIG_TCP_CONG_BBR=y" >> "${DEFCONFIG_PATH}"
          echo "CONFIG_TCP_CONG_BIC=n" >> "${DEFCONFIG_PATH}"
          echo "CONFIG_TCP_CONG_WESTWOOD=n" >> "${DEFCONFIG_PATH}"
          echo "CONFIG_TCP_CONG_HTCP=n" >> "${DEFCONFIG_PATH}"
          echo "CONFIG_IP_NF_TARGET_TTL=y" >> "${DEFCONFIG_PATH}"
          echo "CONFIG_IP6_NF_TARGET_HL=y" >> "${DEFCONFIG_PATH}"
          echo "CONFIG_IP6_NF_MATCH_HL=y" >> "${DEFCONFIG_PATH}"
          echo "CONFIG_IP_NF_TARGET_ECN=y" >> "${DEFCONFIG_PATH}"
          if [ "${{ github.event.inputs.KERNEL_VERSION }}" != "5.10" ]; then
            echo "CONFIG_ZRAM_DEF_COMP_LZORLE=n" >> "${DEFCONFIG_PATH}"
            echo "CONFIG_ZRAM_DEF_COMP_LZO=n" >> "${DEFCONFIG_PATH}"
            echo "CONFIG_ZRAM_DEF_COMP_LZ4=y" >> "${DEFCONFIG_PATH}"
            echo 'CONFIG_ZRAM_DEF_COMP="lz4"' >> "${DEFCONFIG_PATH}"
          fi
          echo "CONFIG_RCU_TRACE=n" >> "${DEFCONFIG_PATH}"

          # Kernel Name defconfig settings - For precise kernel name
          echo "Modifying defconfig for custom kernel name..."
          sed -i '/CONFIG_LOCALVERSION_AUTO/d' "${DEFCONFIG_PATH}" 
          sed -i '/CONFIG_LOCALVERSION=/d' "${DEFCONFIG_PATH}" 
          echo "CONFIG_LOCALVERSION=\"${{ github.event.inputs.KERNEL_NAME }}\"" >> "${DEFCONFIG_PATH}"
          echo "Defconfig set: CONFIG_LOCALVERSION=\"${{ github.event.inputs.KERNEL_NAME }}\""

          sudo sed -i 's/check_defconfig//' ./common/build.config.gki
          cd common
          git add -A && git commit -m "Update defconfig with all features and precise custom kernel name" --allow-empty || echo "No defconfig changes to commit."
      
      - name: Add KPM Configuration Settings
        if: ${{inputs.enable_feature_x }}
        run: |
          set -e
          cd $GITHUB_WORKSPACE/kernel_workspace/kernel_platform
          echo "CONFIG_KPM=y" >> ./common/arch/arm64/configs/gki_defconfig
          sudo sed -i 's/check_defconfig//' ./common/build.config.gki
          cd common
          git add -A && git commit -m "Add KPM config" --allow-empty || echo "No KPM changes to commit."

      - name: Apply Hide Stuff Patch
        run: |
          set -e
          cd $GITHUB_WORKSPACE/kernel_workspace/kernel_platform/common
          if [ -f "$GITHUB_WORKSPACE/TheWildJames_kernel_patches/69_hide_stuff.patch" ]; then
            cp $GITHUB_WORKSPACE/TheWildJames_kernel_patches/69_hide_stuff.patch ./
            patch -p1 --no-backup-if-mismatch < 69_hide_stuff.patch || echo "WARN: 69_hide_stuff.patch failed or applied with issues."
          else
            echo "WARN: 69_hide_stuff.patch not found in cloned TheWildJames_kernel_patches repo, skipping."
          fi
                 
      - name: Add sched_ext (FengChi driver)
        if: ${{inputs.enable_feature_z }}
        run: |
         set -e
         cd $GITHUB_WORKSPACE/kernel_workspace/kernel_platform/
         git clone https://github.com/HanKuCha/sched_ext.git ./sched_ext_temp --depth=1
         cp -r ./sched_ext_temp/* ./common/kernel/sched
         rm -rf ./sched_ext_temp
         
      - name: Set Kernel build timestamp
        run: |
          export SOURCE_DATE_EPOCH=$(date -d "${{ github.event.inputs.KERNEL_TIME }}" +%s)
          echo "SOURCE_DATE_EPOCH=$SOURCE_DATE_EPOCH" >> $GITHUB_ENV
          
      - name: Build Kernel
        run: |
           set -e
           cd $GITHUB_WORKSPACE/kernel_workspace/kernel_platform
           export SOURCE_DATE_EPOCH=${SOURCE_DATE_EPOCH}
           export PATH="/usr/lib/ccache:$PATH" # Ensure ccache is in PATH for Bazel
           echo "Using CCACHE directory: $CCACHE_DIR"
           echo "Ccache statistics before build:"
           ccache -s

           tools/bazel run --config=fast --config=stamp --lto=thin --verbose_failures //common:kernel_aarch64_dist -- --dist_dir=dist
           
           echo "Ccache statistics after build:"
           ccache -s

      - name: Make AnyKernel3 (Patch Image)
        run: |
         set -e
         cd $GITHUB_WORKSPACE/kernel_workspace/kernel_platform/dist/
         curl -LO https://github.com/ShirkNeko/SukiSU_KernelPatch_patch/releases/download/0.11-beta/patch_linux
         chmod +x patch_linux
         ./patch_linux
         rm -f Image
         mv oImage Image
         
      - name: Prepare AnyKernel3 Zip
        run: |
         set -e
         cd $GITHUB_WORKSPACE 
         # Using your preferred AnyKernel3 source
         git clone https://github.com/HanKuCha/AnyKernel3.git AnyKernel3_Package --depth=1      
         rm -rf ./AnyKernel3_Package/.git
         rm -rf ./AnyKernel3_Package/push.sh
         
         cp $GITHUB_WORKSPACE/kernel_workspace/kernel_platform/dist/Image ./AnyKernel3_Package/
         
         cd AnyKernel3_Package
         zip -r9 ../SukiSu_${{ env.KSUVER }}_${{ github.event.inputs.FEIL }}.zip .
         cd ..

      - name: Upload AnyKernel3 Zip
        uses: actions/upload-artifact@v4
        with:
         name: SuKiSu_${{ env.KSUVER }}_${{ github.event.inputs.FEIL }}_AnyKernel3_Zip
         path: SukiSu_${{ env.KSUVER }}_${{ github.event.inputs.FEIL }}.zip
         
      - name: Upload Raw Image
        if: success() 
        uses: actions/upload-artifact@v4
        with:
         name: Raw_Image_SuKiSu_${{ env.KSUVER }}_${{ github.event.inputs.FEIL }}
         path: $GITHUB_WORKSPACE/kernel_workspace/kernel_platform/dist/Image
