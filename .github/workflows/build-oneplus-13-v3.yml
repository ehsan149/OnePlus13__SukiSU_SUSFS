name: OnePlus 13 Build v3
on:
  workflow_dispatch:
    inputs:
      CPU:
        description: "Select compilation CPU type"
        required: true
        default: 'sm8750'
      FEIL:
        description: "Device configuration"
        required: true
        default: 'oneplus_13'
      CPUD:
        description: "Processor codename"
        required: true
        default: 'sun'
      ANDROID_VERSION:
        description: "Kernel Android Version"
        required: true
        default: 'android15'
      KERNEL_VERSION:
        description: "Kernel version"
        required: true
        default: '6.6'
      KERNEL_NAME: 
        description: "Custom kernel name suffix (e.g., -By-Ehsan149-4k)" 
        required: true
        default: '-By-Ehsan149-4k' 
      KERNEL_TIME:
       description: "Custom kernel build time (default: factory)"
       required: true
       default: '2024-12-17 23:36:49 UTC' 
      enable_feature_x:
       description: "Enable KPM support"
       required: false
       default: false
       type: boolean
      enable_feature_y:
       description: "Enable lz4kd compression"
       required: false
       default: false
       type: boolean
      enable_feature_z:
       description: "Enable FengChi driver (sched_ext)" 
       required: false
       default: false
       type: boolean
      
jobs:
  build:
    runs-on: ubuntu-latest
    env:
      CCACHE_COMPILERCHECK: "%compiler% -dumpmachine; %compiler% -dumpversion"
      CCACHE_NOHASHDIR: "true"
      CCACHE_HARDLINK: "true"
      CCACHE_DIR: /home/runner/.ccache
      CCACHE_MAXSIZE: 8G
    steps:
      # Step order corrected: Maximize space first
      - name: Maximize build space
        uses: easimon/maximize-build-space@master
        with:
          root-reserve-mb: 8192 
          temp-reserve-mb: 2048 
          remove-dotnet: 'true'
          remove-android: 'true'
          remove-haskell: 'true'
          remove-codeql: 'true'

      - name: Check out repository code
        uses: actions/checkout@v4

      - name: List files in GITHUB_WORKSPACE after checkout # Debug step
        run: |
          echo "Listing GITHUB_WORKSPACE root after checkout (and after maximize space):"
          ls -la $GITHUB_WORKSPACE
          echo "Listing kernel_addons directory if it exists:"
          ls -la $GITHUB_WORKSPACE/kernel_addons || echo "kernel_addons directory not found or is empty."
          echo "Checking for hmbird_patch.c specifically:"
          if [ -f "$GITHUB_WORKSPACE/kernel_addons/hmbird_patch.c" ]; then
            echo "hmbird_patch.c FOUND at $GITHUB_WORKSPACE/kernel_addons/hmbird_patch.c"
          else
            echo "hmbird_patch.c NOT FOUND at $GITHUB_WORKSPACE/kernel_addons/hmbird_patch.c"
          fi
          
      - name: Configure Git
        run: |
          git config --global user.name "ehsan149" 
          git config --global user.email "ehsan149@yahoo.com" 

      - name: Install dependencies
        run: |
          sudo apt update && sudo apt upgrade -y
          sudo apt install -y python3 git curl patch ccache

      - name: Restore ccache
        uses: actions/cache@v3
        id: ccache 
        with:
          path: ${{ env.CCACHE_DIR }} 
          key: ccache-${{ runner.os }}-${{ github.ref }}-${{ github.sha }} 
          restore-keys: |
            ccache-${{ runner.os }}-${{ github.ref }}-
            ccache-${{ runner.os }}-
      
      - name: Setup ccache
        if: steps.ccache.outputs.cache-hit != 'true'
        run: |
          echo "No ccache found, or cache is for a different commit. Initializing ccache."
          ccache -Cz 
          ccache -M ${{ env.CCACHE_MAXSIZE }}
          echo "Ccache initialized and max size set to ${{ env.CCACHE_MAXSIZE }}."
        
      - name: Display ccache stats before operations
        run: |
          echo "Initial Ccache statistics:"
          ccache -s

      - name: Install repo tool
        run: |
          mkdir -p $GITHUB_WORKSPACE/bin
          curl -sSL https://storage.googleapis.com/git-repo-downloads/repo > $GITHUB_WORKSPACE/bin/repo
          chmod a+x $GITHUB_WORKSPACE/bin/repo
          echo "$GITHUB_WORKSPACE/bin" >> $GITHUB_PATH
          echo "Repo tool installed." 

      - name: Clone TheWildJames Patches Repo (for 69_hide_stuff.patch)
        run: |
          git clone https://github.com/TheWildJames/kernel_patches.git TheWildJames_kernel_patches --depth=1

      - name: Initialize repo and sync
        run: |
          set -e 
          which repo || (echo "ERROR: 'which repo' did not find repo in PATH after Install repo tool step." && exit 1)
          
          mkdir kernel_workspace && cd kernel_workspace
          repo init -u https://github.com/JiuGeFaCai/kernel_manifest.git -b refs/heads/oneplus/${{ github.event.inputs.CPU }} -m ${{ github.event.inputs.FEIL }}.xml --depth=1
          repo --trace sync -c -j$(nproc --all) --no-tags --no-clone-bundle --optimized-fetch --fail-fast
          rm kernel_platform/common/android/abi_gki_protected_exports_* || echo "No protected exports!"
          rm kernel_platform/msm-kernel/android/abi_gki_protected_exports_* || echo "No protected exports!"
         
      - name: Set up SukiSU
        run: |
          set -e
          cd $GITHUB_WORKSPACE/kernel_workspace/kernel_platform
          curl -LSs "https://raw.githubusercontent.com/ShirkNeko/SukiSU-Ultra/main/kernel/setup.sh" | bash -s susfs-dev
          cd ./KernelSU
          KSU_VERSION=$(expr $(/usr/bin/git rev-list --count main) "+" 10606) 
          echo "KSUVER=$KSU_VERSION" >> $GITHUB_ENV
          sed -i "s/DKSU_VERSION=12800/DKSU_VERSION=${KSU_VERSION}/" kernel/Makefile 
        
      - name: Set up susfs
        run: |
          set -e 
          cd $GITHUB_WORKSPACE/kernel_workspace/kernel_platform

          SUSFS_CLONE_TARGET_REL="../susfs4ksu" 
          SUKISU_PATCH_CLONE_TARGET_REL="../SukiSU_patch"
          SUSFS_BRANCH="gki-${{ github.event.inputs.ANDROID_VERSION }}-${{ github.event.inputs.KERNEL_VERSION }}"

          git clone https://gitlab.com/simonpunk/susfs4ksu.git -b "${SUSFS_BRANCH}" "${SUSFS_CLONE_TARGET_REL}" --depth=1
          if [ ! -d "${SUSFS_CLONE_TARGET_REL}" ]; then echo "ERROR: Failed to clone susfs4ksu"; exit 1; fi

          git clone https://github.com/ShirkNeko/SukiSU_patch.git "${SUKISU_PATCH_CLONE_TARGET_REL}" --depth=1
          if [ ! -d "${SUKISU_PATCH_CLONE_TARGET_REL}" ]; then echo "ERROR: Failed to clone SukiSU_patch"; exit 1; fi

          PATCH_FILE_NAME="50_add_susfs_in_${SUSFS_BRANCH}.patch" 
          EXPECTED_PATCH_PATH="${SUSFS_CLONE_TARGET_REL}/kernel_patches/${PATCH_FILE_NAME}"

          if [ ! -f "${EXPECTED_PATCH_PATH}" ]; then
              echo "ERROR: SUSFS Patch file ${EXPECTED_PATCH_PATH} not found!"
              exit 1
          fi
          
          cp "${EXPECTED_PATCH_PATH}" ./common/
          cp "${SUSFS_CLONE_TARGET_REL}/kernel_patches/fs/"* ./common/fs/
          cp "${SUSFS_CLONE_TARGET_REL}/kernel_patches/include/linux/"* ./common/include/linux/
          cp -r "${SUKISU_PATCH_CLONE_TARGET_REL}/other/zram/lz4k/include/linux/"* ./common/include/linux/
          cp -r "${SUKISU_PATCH_CLONE_TARGET_REL}/other/zram/lz4k/lib/"* ./common/lib/
          cp -r "${SUKISU_PATCH_CLONE_TARGET_REL}/other/zram/lz4k/crypto/"* ./common/crypto/
          cp -r "${SUKISU_PATCH_CLONE_TARGET_REL}/other/zram/lz4k_oplus" ./common/lib/
          
          cd ./common 

          sed -i 's/-32,12 +32,38/-32,11 +32,37/g' "${PATCH_FILE_NAME}"
          sed -i '/#include <trace\/hooks\/fs.h>/d' "${PATCH_FILE_NAME}"

          patch -p1 < "${PATCH_FILE_NAME}" || echo "WARN: SUSFS base patch may not have applied cleanly."
          cp "${GITHUB_WORKSPACE}/kernel_workspace/SukiSU_patch/hooks/syscall_hooks.patch" ./ 
          patch -p1 -F 3 < syscall_hooks.patch
          echo "Finished 'Set up susfs' step."

      - name: Apply HMBird GKI patch
        run: |
          set -e
          echo "Applying HMBird GKI patch..."
          HMBIRD_PATCH_DIR="$GITHUB_WORKSPACE/kernel_workspace/kernel_platform/common/drivers"
          HMBIRD_SOURCE_FILE="$GITHUB_WORKSPACE/kernel_addons/hmbird_patch.c" 

          # Debug lines to ensure file is found after checkout and maximize space
          echo "DEBUG (HMBird Step): Value of GITHUB_WORKSPACE is: $GITHUB_WORKSPACE"
          echo "DEBUG (HMBird Step): Expected HMBIRD_SOURCE_FILE path is: $HMBIRD_SOURCE_FILE"
          echo "DEBUG (HMBird Step): Listing contents of $GITHUB_WORKSPACE/kernel_addons:"
          ls -la $GITHUB_WORKSPACE/kernel_addons || echo "DEBUG (HMBird Step): kernel_addons directory not found or ls failed."

          if [ ! -f "$HMBIRD_SOURCE_FILE" ]; then
            echo "CRITICAL ERROR: $HMBIRD_SOURCE_FILE not found right before cp command!"
            echo "Contents of $GITHUB_WORKSPACE might be relevant:"
            ls -la $GITHUB_WORKSPACE
            exit 1
          fi
          
          mkdir -p "$HMBIRD_PATCH_DIR"
          echo "DEBUG (HMBird Step): Attempting to copy $HMBIRD_SOURCE_FILE to $HMBIRD_PATCH_DIR/"
          cp "$HMBIRD_SOURCE_FILE" "$HMBIRD_PATCH_DIR/"
          echo "hmbird_patch.c copied to drivers directory."
          
          cd "$HMBIRD_PATCH_DIR"
          if [ -f "Makefile" ]; then
              if ! grep -q "hmbird_patch.o" Makefile; then
                echo "obj-y += hmbird_patch.o" >> Makefile
                echo "HMBird patch object added to drivers/Makefile."
              else
                echo "HMBird patch object already in drivers/Makefile."
              fi
          else
              echo "obj-y += hmbird_patch.o" > Makefile
              echo "Created drivers/Makefile and added HMBird patch object."
          fi
          
          cd $GITHUB_WORKSPACE/kernel_workspace/kernel_platform 
          if ! git diff --quiet HEAD -- common/drivers/hmbird_patch.c common/drivers/Makefile; then
             echo "Committing HMBird GKI patch module to local kernel source tree..."
             git add common/drivers/hmbird_patch.c common/drivers/Makefile
             git commit -m "Add HMBird GKI patch module"
          else
             echo "No new HMBird files or Makefile changes found to commit in kernel_platform."
          fi
          echo "Finished HMBird GKI patch application."

      - name: Apply lz4kd Patches
        if: ${{inputs.enable_feature_y }}
        run: |
          set -e
          cd $GITHUB_WORKSPACE/kernel_workspace/kernel_platform/common
          cp "${GITHUB_WORKSPACE}/kernel_workspace/SukiSU_patch/other/zram/zram_patch/${{ github.event.inputs.KERNEL_VERSION }}/lz4kd.patch" ./
          patch -p1 -F 3 < lz4kd.patch || echo "WARN: lz4kd patch failed."
      
      - name: Apply ECN and TCP Pacing Tweaks via SED
        run: |
          set -e
          TCP_IPV4_PATH="$GITHUB_WORKSPACE/kernel_workspace/kernel_platform/common/net/ipv4/tcp_ipv4.c"
          if [ ! -f "$TCP_IPV4_PATH" ]; then echo "ERROR: $TCP_IPV4_PATH not found!"; exit 1; fi

          sed -i 's/net->ipv4.sysctl_tcp_ecn = 2;/net->ipv4.sysctl_tcp_ecn = 1;/' "$TCP_IPV4_PATH"
          sed -i 's/net->ipv4.sysctl_tcp_pacing_ss_ratio = 200;/net->ipv4.sysctl_tcp_pacing_ss_ratio = 150;/' "$TCP_IPV4_PATH"
          sed -i 's/net->ipv4.sysctl_tcp_pacing_ca_ratio = 120;/net->ipv4.sysctl_tcp_pacing_ca_ratio = 110;/' "$TCP_IPV4_PATH"
          echo "ECN and TCP Pacing tweaks successfully applied via SED."
          
      - name: Add Kernel Configuration Settings and Custom Kernel Name
        run: |
          set -e
          cd $GITHUB_WORKSPACE/kernel_workspace/kernel_platform
          DEFCONFIG_PATH="./common/arch/arm64/configs/gki_defconfig"
          
          echo "CONFIG_KSU=y" >> "${DEFCONFIG_PATH}"
          echo "CONFIG_KSU_SUSFS_SUS_SU=n" >> "${DEFCONFIG_PATH}"
          echo "CONFIG_KSU_MANUAL_HOOK=y" >> "${DEFCONFIG_PATH}"
          echo "CONFIG_KSU_SUSFS=y" >> "${DEFCONFIG_PATH}"
          echo "CONFIG_KSU_SUSFS_HAS_MAGIC_MOUNT=y" >> "${DEFCONFIG_PATH}"
          echo "CONFIG_KSU_SUSFS_SUS_PATH=y" >> "${DEFCONFIG_PATH}"
          echo "CONFIG_KSU_SUSFS_SUS_MOUNT=y" >> "${DEFCONFIG_PATH}"
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_KSU_DEFAULT_MOUNT=y" >> "${DEFCONFIG_PATH}"
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_BIND_MOUNT=y" >> "${DEFCONFIG_PATH}"
          echo "CONFIG_KSU_SUSFS_SUS_KSTAT=y" >> "${DEFCONFIG_PATH}"
          echo "CONFIG_KSU_SUSFS_SUS_OVERLAYFS=n" >> "${DEFCONFIG_PATH}"
          echo "CONFIG_KSU_SUSFS_TRY_UMOUNT=y" >> "${DEFCONFIG_PATH}"
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_TRY_UMOUNT_FOR_BIND_MOUNT=y" >> "${DEFCONFIG_PATH}"
          echo "CONFIG_KSU_SUSFS_SPOOF_UNAME=y" >> "${DEFCONFIG_PATH}"
          echo "CONFIG_KSU_SUSFS_ENABLE_LOG=y" >> "${DEFCONFIG_PATH}"
          echo "CONFIG_KSU_SUSFS_HIDE_KSU_SUSFS_SYMBOLS=y" >> "${DEFCONFIG_PATH}"
          echo "CONFIG_KSU_SUSFS_SPOOF_CMDLINE_OR_BOOTCONFIG=y" >> "${DEFCONFIG_PATH}"
          echo "CONFIG_KSU_SUSFS_OPEN_REDIRECT=y" >> "${DEFCONFIG_PATH}"
          echo "CONFIG_CRYPTO_LZ4HC=y" >> "${DEFCONFIG_PATH}"
          echo "CONFIG_CRYPTO_LZ4K=y" >> "${DEFCONFIG_PATH}"
          echo "CONFIG_CRYPTO_LZ4KD=y" >> "${DEFCONFIG_PATH}"
          echo "CONFIG_CRYPTO_842=y" >> "${DEFCONFIG_PATH}"
          echo "CONFIG_TCP_CONG_ADVANCED=y" >> "${DEFCONFIG_PATH}"
          echo "CONFIG_TCP_CONG_BBR=y" >> "${DEFCONFIG_PATH}"
          echo "CONFIG_TCP_CONG_BIC=n" >> "${DEFCONFIG_PATH}"
          echo "CONFIG_TCP_CONG_WESTWOOD=n" >> "${DEFCONFIG_PATH}"
          echo "CONFIG_TCP_CONG_HTCP=n" >> "${DEFCONFIG_PATH}"
          echo "CONFIG_IP_NF_TARGET_TTL=y" >> "${DEFCONFIG_PATH}"
          echo "CONFIG_IP6_NF_TARGET_HL=y" >> "${DEFCONFIG_PATH}"
          echo "CONFIG_IP6_NF_MATCH_HL=y" >> "${DEFCONFIG_PATH}"
          echo "CONFIG_IP_NF_TARGET_ECN=y" >> "${DEFCONFIG_PATH}"
          if [ "${{ github.event.inputs.KERNEL_VERSION }}" != "5.10" ]; then
            echo "CONFIG_ZRAM_DEF_COMP_LZORLE=n" >> "${DEFCONFIG_PATH}"
            echo "CONFIG_ZRAM_DEF_COMP_LZO=n" >> "${DEFCONFIG_PATH}"
            echo "CONFIG_ZRAM_DEF_COMP_LZ4=y" >> "${DEFCONFIG_PATH}"
            echo 'CONFIG_ZRAM_DEF_COMP="lz4"' >> "${DEFCONFIG_PATH}"
          fi
          echo "CONFIG_RCU_TRACE=n" >> "${DEFCONFIG_PATH}"

          # Kernel Name defconfig settings
          echo "Modifying defconfig for custom kernel name..."
          sed -i '/CONFIG_LOCALVERSION_AUTO/d' "${DEFCONFIG_PATH}" 
          sed -i '/CONFIG_LOCALVERSION=/d' "${DEFCONFIG_PATH}" 
          echo "CONFIG_LOCALVERSION=\"${{ github.event.inputs.KERNEL_NAME }}\"" >> "${DEFCONFIG_PATH}"
          echo "Defconfig set: CONFIG_LOCALVERSION=\"${{ github.event.inputs.KERNEL_NAME }}\""

          sudo sed -i 's/check_defconfig//' ./common/build.config.gki
          cd common
          git add -A && git commit -m "Update defconfig with all features and precise custom kernel name" --allow-empty || echo "No defconfig changes to commit."
      
      - name: Add KPM Configuration Settings
        if: ${{inputs.enable_feature_x }}
        run: |
          set -e
          cd $GITHUB_WORKSPACE/kernel_workspace/kernel_platform
          echo "CONFIG_KPM=y" >> ./common/arch/arm64/configs/gki_defconfig
          sudo sed -i 's/check_defconfig//' ./common/build.config.gki
          cd common
          git add -A && git commit -m "Add KPM config to defconfig" --allow-empty || echo "No KPM defconfig changes to commit."

      - name: Apply Hide Stuff Patch
        run: |
          set -e
          cd $GITHUB_WORKSPACE/kernel_workspace/kernel_platform/common
          if [ -f "$GITHUB_WORKSPACE/TheWildJames_kernel_patches/69_hide_stuff.patch" ]; then
            cp $GITHUB_WORKSPACE/TheWildJames_kernel_patches/69_hide_stuff.patch ./
            patch -p1 --no-backup-if-mismatch < 69_hide_stuff.patch || echo "WARN: 69_hide_stuff.patch failed or applied with issues."
          else
            echo "WARN: 69_hide_stuff.patch not found in cloned TheWildJames_kernel_patches repo, skipping."
          fi
                 
      - name: Add sched_ext (FengChi driver)
        if: ${{inputs.enable_feature_z }}
        run: |
         set -e
         cd $GITHUB_WORKSPACE/kernel_workspace/kernel_platform/
         git clone https://github.com/HanKuCha/sched_ext.git ./sched_ext_temp --depth=1
         cp -r ./sched_ext_temp/* ./common/kernel/sched
         rm -rf ./sched_ext_temp
         
      - name: Set Kernel build timestamp
        run: |
          export SOURCE_DATE_EPOCH=$(date -d "${{ github.event.inputs.KERNEL_TIME }}" +%s)
          echo "SOURCE_DATE_EPOCH=$SOURCE_DATE_EPOCH" >> $GITHUB_ENV
          
      - name: Build Kernel
        run: |
           set -e
           cd $GITHUB_WORKSPACE/kernel_workspace/kernel_platform
           export SOURCE_DATE_EPOCH=${SOURCE_DATE_EPOCH}
           export PATH="/usr/lib/ccache:$PATH" 
           echo "Using CCACHE directory: $CCACHE_DIR"
           echo "Ccache statistics before build:"
           ccache -s

           tools/bazel run --config=fast --config=stamp --lto=thin --verbose_failures //common:kernel_aarch64_dist -- --dist_dir=dist
           
           echo "Ccache statistics after build:"
           ccache -s

      - name: Make AnyKernel3 (Patch Image)
        run: |
         set -e
         cd $GITHUB_WORKSPACE/kernel_workspace/kernel_platform/dist/
         curl -LO https://github.com/ShirkNeko/SukiSU_KernelPatch_patch/releases/download/0.11-beta/patch_linux
         chmod +x patch_linux
         ./patch_linux
         rm -f Image
         mv oImage Image
         
      - name: Prepare AnyKernel3 Zip
        run: |
         set -e
         cd $GITHUB_WORKSPACE 
         git clone https://github.com/HanKuCha/AnyKernel3.git AnyKernel3_Package --depth=1      
         rm -rf ./AnyKernel3_Package/.git
         rm -rf ./AnyKernel3_Package/push.sh
         
         cp $GITHUB_WORKSPACE/kernel_workspace/kernel_platform/dist/Image ./AnyKernel3_Package/
         
         cd AnyKernel3_Package
         zip -r9 ../SukiSu_${{ env.KSUVER }}_${{ github.event.inputs.FEIL }}.zip .
         cd ..

      - name: Upload AnyKernel3 Zip
        uses: actions/upload-artifact@v4
        with:
         name: SuKiSu_${{ env.KSUVER }}_${{ github.event.inputs.FEIL }}_AnyKernel3_Zip
         path: SukiSu_${{ env.KSUVER }}_${{ github.event.inputs.FEIL }}.zip
         
      - name: Upload Raw Image
        if: success() 
        uses: actions/upload-artifact@v4
        with:
         name: Raw_Image_SuKiSu_${{ env.KSUVER }}_${{ github.event.inputs.FEIL }}
         path: $GITHUB_WORKSPACE/kernel_workspace/kernel_platform/dist/Image
         
